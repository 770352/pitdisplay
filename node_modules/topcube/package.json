{
  "author": {
    "name": "Tim Caswell",
    "email": "tim@creationix.com"
  },
  "name": "topcube",
  "description": "Simple bindings to create a webkit window that node can control",
  "version": "0.2.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/creationix/topcube.git"
  },
  "main": "./lib/topcube.js",
  "dependencies": {},
  "devDependencies": {},
  "engines": {
    "node": ">= 0.8.11 < 0.11.0"
  },
  "scripts": {
    "install": "node-gyp rebuild"
  },
  "gypfile": true,
  "readme": "TopCube\n-------\nGives node developers a way to have a desktop GUI to their node servers using HTML5 + CSS3 as the GUI platform.\n\nAssumes:\n\n- **Client/server architecture with communication over HTTP.**  \n  If you're interested in merged event loops, common javascript contexts, or other non-HTTP communication and resource sharing between the node process and the GUI take a look at [node-webkit](https://github.com/rogerwang/node-webkit).\n- **Single, HTML5 + CSS3 driven window.**  \n  The client window does not spawn popups, support tabs, create additional windows or add any native UI components other than what a typical browser pane would provide.\n- **Child process.**  \n  The client window runs as a child process of the calling node process.\n\n## Implementation Details\n\n**Linux**\n\nRequires `gtk2.0` and `webkitgtk`. Install the following packages on Debian/Ubuntu or the equivalents for your system to build topcube:\n\n    sudo apt-get install libgtk2.0-dev libwebkitgtk-dev\n\n**Windows**\n\nThe windows client currently downloads a custom compiled binary client that uses the [Chromium Embedded Framework](http://code.google.com/p/chromiumembedded/). If you're interested in building the client yourself or making modifications see [mapbox/cefclient](https://github.com/mapbox/cefclient).\n\n**Mac OS X**\n\nTODO. Work on a native webkit client for Mac OS X that can be built within topcube is certainly welcome.\n\n## API\n\nPass a single `options` object to topcube with the following properties:\n\n- `url` of your running node application to point topcube at.\n- `name` of the window displayed in the titlebar. Also sets any window manager classes associated with the topcube window. On linux a `.desktop` file using the same name can be used set the icon for your application.\n- `width` in pixels of the window. Optional.\n- `height` in pixels of the windows. Optional.\n- `minwidth` in pixels. Restricts resizing the window width smaller than this value. Optional.\n- `minheight` in pixels. Restricts resizing the window height smaller than this value. Optional.\n- `ico` full path to a Windows `.ico` file to use for your application. Optional, no-op on non-windows platforms.\n\nExample usage of topcube to wrap a default \"Hello world\" server.\n\n    var Http = require('http');\n    var TopCube = require('topcube');\n\n    Http.createServer(function (req, res) {\n      res.writeHead(200, {'Content-Type': 'text/plain'});\n      res.end('Hello World\\n');\n    }).listen(7569);\n\n    TopCube({\n      url: 'http://localhost:7569',\n      name: 'My webapp',\n      width: 800,\n      height: 600\n    });\n\n",
  "readmeFilename": "README.markdown",
  "_id": "topcube@0.2.0",
  "dist": {
    "shasum": "0fc9e9eb026e7e143d5a0f5684ed915b19f0bf20"
  },
  "_from": "topcube@0.2.0",
  "_resolved": "https://registry.npmjs.org/topcube/-/topcube-0.2.0.tgz"
}
